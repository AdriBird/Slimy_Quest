[gd_scene load_steps=17 format=2]

[ext_resource path="res://Sprites/Tilesets/tutoYoutube2.png" type="Texture" id=1]
[ext_resource path="res://Scenes/Player/Player.tscn" type="PackedScene" id=2]
[ext_resource path="res://Scenes/Autres_sc√®nes/background_forest.tscn" type="PackedScene" id=3]
[ext_resource path="res://Scenes/Shaders/Shader_eau.tres" type="Material" id=4]
[ext_resource path="res://icon.png" type="Texture" id=5]
[ext_resource path="res://Sprites/Player/Slime_slide_1.png" type="Texture" id=6]

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 32.1667, 32.1496 )

[sub_resource type="StreamTexture" id=2]
flags = 4
load_path = "res://.import/icon.png-487276ed1e3a0c39cad0279d744ee560.stex"

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

uniform sampler2D noise1 : hint_black;
uniform sampler2D noise2 : hint_black;

uniform float deformation_speed = 0.05;
uniform vec2 deformation_size = vec2(0.05,0.05);
uniform vec2 tile_factor = vec2(1.0, 1.0);
uniform vec2 scale = vec2(1.0,1.0);
uniform vec4 color: hint_color = vec4(0.0,0.0,1.0,0.5);
uniform vec2 size = vec2(1.0,1.0);
uniform float water_level = 20.0;
uniform float surface_width = 1.0;
void fragment() {
	vec2 u_pos = UV *scale *tile_factor+ TIME * deformation_speed;
	vec2 offset = vec2(texture(noise1, u_pos).x, texture(noise2, u_pos).y) - 0.5;
	vec2 deformation = offset*deformation_size;
	vec2 real_pos = (UV+deformation *10.0) * scale * size;
	vec2 tex_to_screen_uv_ratio = SCREEN_PIXEL_SIZE / TEXTURE_PIXEL_SIZE;
	
	// compute UV of the flipped screen
	vec2 flipped_screen_uv = vec2( SCREEN_UV.x, 
		SCREEN_UV.y + 1.0 * UV.y * tex_to_screen_uv_ratio.y );
		
	vec2 suv = vec2( SCREEN_UV.x, SCREEN_UV.y + 2.0 * UV.y * tex_to_screen_uv_ratio.y );
	if (real_pos.y < water_level) {
		COLOR = vec4(0,0,0,0);
	}
	else if (real_pos.y < water_level + surface_width){
		//COLOR = vec4(color.rgb, color.a);
		COLOR = vec4(1.0,1.0,1.0,1.0)
	}
	else{
		COLOR = mix(textureLod(SCREEN_TEXTURE, flipped_screen_uv + deformation , 0.0), vec4(color.rgb, 1.0), color.a);
	}
	//COLOR = mix(textureLod(SCREEN_TEXTURE, UV + offset*deformation_size, 0.0), vec4(color.rgb, 1.0), color.a);
	//COLOR = vec4(offset, 0.0, 1.0);
}
"

[sub_resource type="OpenSimplexNoise" id=4]

[sub_resource type="NoiseTexture" id=5]
seamless = true
noise = SubResource( 4 )

[sub_resource type="OpenSimplexNoise" id=6]
seed = 1

[sub_resource type="NoiseTexture" id=7]
seamless = true
noise = SubResource( 6 )

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 3 )
shader_param/deformation_speed = 0.1
shader_param/deformation_size = Vector2( 0.04, 0.04 )
shader_param/tile_factor = Vector2( 0.1, 0.1 )
shader_param/scale = Vector2( 1, 1 )
shader_param/color = Color( 0.137255, 0.576471, 0.745098, 0.278431 )
shader_param/size = Vector2( 64, 64 )
shader_param/water_level = 3.0
shader_param/surface_width = 2.0
shader_param/noise1 = SubResource( 5 )
shader_param/noise2 = SubResource( 7 )

[sub_resource type="Shader" id=9]
code = "shader_type canvas_item;

uniform sampler2D noise1 : hint_black;
uniform sampler2D noise2 : hint_black;

uniform float deformation_speed = 0.05;
uniform vec2 deformation_size = vec2(0.05,0.05);
uniform vec2 tile_factor = vec2(1.0, 1.0);
uniform vec2 scale = vec2(1.0,1.0);
uniform vec4 color: hint_color = vec4(0.0,0.0,1.0,0.5);
uniform vec2 size = vec2(1.0,1.0);
uniform float water_level = 20.0;
uniform float surface_width = 1.0;
void fragment() {
	vec2 u_pos = UV *scale *tile_factor+ TIME * deformation_speed;
	vec2 offset = vec2(texture(noise1, u_pos).x, texture(noise2, u_pos).y) - 0.5;
	vec2 deformation = offset*deformation_size;
	vec2 real_pos = (UV+deformation *10.0) * scale * size;
	vec2 tex_to_screen_uv_ratio = SCREEN_PIXEL_SIZE / TEXTURE_PIXEL_SIZE;
	
	// compute UV of the flipped screen
	vec2 flipped_screen_uv = vec2( SCREEN_UV.x, 
		SCREEN_UV.y + 1.0 * UV.y * tex_to_screen_uv_ratio.y );
		
	vec2 suv = vec2( SCREEN_UV.x, SCREEN_UV.y + 2.0 * UV.y * tex_to_screen_uv_ratio.y );
	if (real_pos.y < water_level) {
		COLOR = vec4(0,0,0,0);
	}
	else if (real_pos.y < water_level + surface_width){
		//COLOR = vec4(color.rgb, color.a);
		COLOR = vec4(1.0,1.0,1.0,1.0)
	}
	else{
		COLOR = mix(textureLod(SCREEN_TEXTURE, flipped_screen_uv + deformation , 0.0), vec4(color.rgb, 1.0), color.a);
	}
	//COLOR = mix(textureLod(SCREEN_TEXTURE, UV + offset*deformation_size, 0.0), vec4(color.rgb, 1.0), color.a);
	//COLOR = vec4(offset, 0.0, 1.0);
}
"

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )
shader_param/deformation_speed = 0.1
shader_param/deformation_size = Vector2( 0.02, 0.02 )
shader_param/tile_factor = Vector2( 0.1, 0.1 )
shader_param/scale = Vector2( 1, 1 )
shader_param/color = Color( 0.329412, 0.811765, 0.996078, 0.32549 )
shader_param/size = Vector2( 64, 64 )
shader_param/water_level = 20.0
shader_param/surface_width = 5.0
shader_param/noise1 = SubResource( 5 )
shader_param/noise2 = SubResource( 7 )

[node name="Test_scene" type="Node2D"]

[node name="StaticBody2D" type="StaticBody2D" parent="."]
position = Vector2( 751.726, 1422.47 )
scale = Vector2( 1000, 6 )
z_index = -2
__meta__ = {
"_edit_group_": true
}

[node name="Sprite" type="Sprite" parent="StaticBody2D"]
texture = ExtResource( 1 )
region_enabled = true
region_rect = Rect2( 0, 64, 64, 64 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="StaticBody2D"]
shape = SubResource( 1 )

[node name="Slime" parent="." instance=ExtResource( 2 )]
position = Vector2( 585.115, 1171.95 )

[node name="background_forest" parent="." instance=ExtResource( 3 )]

[node name="CanvasModulate" type="CanvasModulate" parent="."]
color = Color( 0.443137, 0.443137, 0.443137, 1 )

[node name="TextureRect3" type="TextureRect" parent="."]
material = ExtResource( 4 )
margin_left = 3005.9
margin_top = 1202.45
margin_right = 4581.9
margin_bottom = 1615.45
texture = SubResource( 2 )
stretch_mode = 2

[node name="TextureRect2" type="TextureRect" parent="."]
material = SubResource( 8 )
margin_left = 4923.53
margin_top = 1198.44
margin_right = 6437.53
margin_bottom = 1587.44
texture = ExtResource( 5 )
stretch_mode = 2

[node name="TextureRect" type="TextureRect" parent="."]
material = SubResource( 10 )
margin_left = 856.122
margin_top = 1203.92
margin_right = 2339.12
margin_bottom = 1608.92
texture = ExtResource( 5 )
stretch_mode = 2

[node name="Sprite" type="Sprite" parent="."]
position = Vector2( 863.221, 1203.37 )
z_index = 3
texture = ExtResource( 6 )
